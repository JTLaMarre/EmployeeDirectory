{"version":3,"sources":["components/EmployeeRow.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeRow","props","name","first","last","phone","email","age","App","state","employees","searched","handleInputChange","event","value","target","setState","handleSearch","preventDefault","searchforEmployee","sortName","sort","a","b","console","log","this","filter","employee","className","type","onChange","placeholder","onClick","map","id","login","uuid","key","dob","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ugrBAceA,G,MAZK,SAACC,GACjB,OAEI,4BACI,4BAAKA,EAAMC,KAAKC,MAAhB,IAAwBF,EAAMC,KAAKE,MACnC,qCAAWH,EAAMI,OACjB,qCAAWJ,EAAMK,OACjB,mCAASL,EAAMM,Q,OC2FZC,E,4MA5FbC,MAAO,CACTC,YACAC,SAAU,I,EAGRC,kBAAoB,SAAAC,GAClB,IAAMC,EAAQD,EAAME,OAAOD,MACrBZ,EAAOW,EAAME,OAAOb,KAC1B,EAAKc,SAAL,eACGd,EAAOY,K,EAIZG,aAAa,SAAAJ,GACXA,EAAMK,iBACN,IAAIhB,EAAQ,EAAKO,MAAME,SACvB,EAAKQ,kBAAkBjB,I,EAY3BkB,SAAS,WACT,IAAMV,EAAW,EAAKD,MAAMC,UAAUW,MAAK,SAASC,EAAEC,GAClD,OAAGD,EAAEpB,KAAKC,MAAQoB,EAAErB,KAAKC,OACb,EAED,KAGf,EAAKa,SAAS,CAACN,e,gEAhBKR,GAChBsB,QAAQC,IAAIC,KAAKjB,MAAME,UACzBa,QAAQC,IAAIvB,GACZsB,QAAQC,IAAIC,KAAKjB,MAAMC,WACvB,IAAMA,EAAYgB,KAAKjB,MAAMC,UAAUiB,QAAO,SAAAC,GAAQ,OAAIA,EAAS1B,KAAKC,QAAUD,KAClFsB,QAAQC,IAAIf,GACZgB,KAAKV,SAAS,CAACN,gB,+BAef,OACE,6BACA,yBAAKmB,UAAU,mBACf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,uBACD,uCACA,2BACAC,KAAK,OACLhB,MAAQY,KAAKZ,MACbiB,SAAUL,KAAKd,kBACfoB,YAAY,4BACZ9B,KAAK,aAGN,4BAAQ2B,UAAU,oBAAoBI,QAASP,KAAKT,cAApD,aAMA,yBAAKY,UAAU,uBACb,yBAAKA,UAAU,kBACL,2BAAOA,UAAU,SACjB,+BACA,4BACE,wBAAII,QAASP,KAAKN,UAAlB,QACA,qCACA,qCACA,oCAEDM,KAAKjB,MAAMC,UAAUwB,KAAI,SAAAN,GAAQ,OACxC,kBAAC,EAAD,CACEO,GAAIP,EAASQ,MAAMC,KACnBC,IAAKV,EAASQ,MAAMC,KACpBnC,KAAM0B,EAAS1B,KACfG,MAAOuB,EAASvB,MAChBC,MAAOsB,EAAStB,MAChBC,IAAKqB,EAASW,IAAIhC,kB,GAhFZiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.709959c3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst EmployeeRow = (props) => {\r\n    return (\r\n        \r\n        <tr>\r\n            <th>{props.name.first} {props.name.last}</th>\r\n            <th>Phone:{props.phone}</th>\r\n            <th>Email:{props.email}</th>\r\n            <th>Age:{props.age}</th>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EmployeeRow","import React, { Component } from 'react';\nimport './App.css';\nimport EmployeeRow from './components/EmployeeRow.js'\nimport employees from './employees.json'\n\n\nclass App extends Component {\n\n  state= {\nemployees,\nsearched: \"\"\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSearch=event=>{\n    event.preventDefault();\n    let name = (this.state.searched)\n    this.searchforEmployee(name)\n  }\n  \n  \n  searchforEmployee(name) {\n    console.log(this.state.searched)\n  console.log(name)\n  console.log(this.state.employees)\n  const employees = this.state.employees.filter(employee => employee.name.first === name);\n  console.log(employees)\n  this.setState({employees});\n};\nsortName=()=>{\nconst employees= this.state.employees.sort(function(a,b){\n    if(a.name.first < b.name.first){\n        return -1;\n    }else{\n        return 1;\n    }\n})\nthis.setState({employees})\n};\n\n\n  render(){\n  return (\n    <div>\n    <div className=\"hero is-primary\">\n    <div className=\"hero-body\">\n      <h1 className=\"is-size-2\"> Employee Directory</h1>\n     <span>Search \n     <input \n     type=\"text\"\n     value ={this.value}\n     onChange={this.handleInputChange}\n     placeholder=\"search by first name here\"\n     name=\"searched\"\n     >\n    </input>\n    <button className=\"button is-warning\" onClick={this.handleSearch}>\n      search\n    </button>\n     </span>\n    </div>\n    </div>\n    <div className=\"columns is-centered\">\n      <div className=\"column is-half\">\n                <table className=\"table\">\n                <tbody>\n                <tr>\n                  <th onClick={this.sortName}>name</th>\n                  <th>Phone</th>\n                  <th>Email</th>\n                  <th>Age</th>\n                </tr>\n                {this.state.employees.map(employee => (\n          <EmployeeRow\n            id={employee.login.uuid}\n            key={employee.login.uuid}\n            name={employee.name}\n            phone={employee.phone}\n            email={employee.email}\n            age={employee.dob.age}\n          />\n        ))}\n          </tbody>\n          \n                </table>\n                </div>\n                \n            </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}